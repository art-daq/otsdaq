
//========================================================================================================================
// getWildCardMatchFromMap ~
//	static template function
//
//	returns value if needle is in haystack otherwise throws exception
//	(considering wildcards AND match priority as defined by StringMacros::wildCardMatch)
template<class T>
T& StringMacros::getWildCardMatchFromMap(const std::string& needle, std::map<std::string, T>& haystack, std::string* foundKey)
{
	unsigned int matchPriority,
	    bestMatchPriority = 0;  // lowest number matters most for matches

	if(!haystack.size())
	{
		__SS__ << "Needle '" << needle << "' not found in EMPTY wildcard haystack:" << __E__;
		__SS_ONLY_THROW__;
	}

	//__COUT__ << StringMacros::mapToString(haystack) << __E__;

	std::string bestMatchKey;
	for(auto& haystackPair : haystack)
		// use wildcard match, flip needle parameter.. because we want haystack to have
		// the wildcards 	check resulting priority to see if we are done with search
		//(when priority=1, can be done)
		if(StringMacros::wildCardMatch(haystackPair.first, needle, &matchPriority))
		{
			if(matchPriority == 1)  // found best possible match, so done
			{
				if(foundKey)
					*foundKey = haystackPair.first;
				return haystackPair.second;
			}

			if(!bestMatchPriority || matchPriority < bestMatchPriority)
			{
				// found new best match
				bestMatchPriority = matchPriority;
				bestMatchKey      = haystackPair.first;
			}
		}

	if(bestMatchPriority)  // found a match, although not exact, i.e. wildcard was used
	{
		//__COUTV__(bestMatchPriority);
		//__COUTV__(bestMatchKey);
		//__COUT__ << "value found: " << haystack.at(bestMatchKey) << __E__;
		if(foundKey)
			*foundKey = bestMatchKey;
		return haystack.at(bestMatchKey);
	}

	__SS__ << "Needle '" << needle << "' not found in wildcard haystack:" << __E__;
	bool first = true;
	for(const auto& haystackPair : haystack)
		if(first)
		{
			ss << ", " << haystackPair.first;
			first = false;
		}
		else
			ss << ", " << haystackPair.first;
	__SS_THROW__;
}  // end getWildCardMatchFromMap<T>()

//==============================================================================
// static template function
//	for all numbers, but not bools (bools has a specialized template definition)
//	return false if string is not a number
template<class T>
bool StringMacros::getNumber(const std::string& s, T& retValue)
{
	//__COUTV__(s);

	// extract set of potential numbers and operators
	std::vector<std::string> numbers;
	std::vector<char>        ops;

	StringMacros::getVectorFromString(s,
	                                  numbers,
	                                  /*delimiter*/ std::set<char>({'+', '-', '*', '/'}),
	                                  /*whitespace*/ std::set<char>({' ', '\t', '\n', '\r'}),
	                                  &ops);

	//__COUTV__(StringMacros::vectorToString(numbers));
	//__COUTV__(StringMacros::vectorToString(ops));

	retValue = 0;  // initialize

	T tmpValue;

	unsigned int i    = 0;
	unsigned int opsi = 0;
	unsigned int blankNumberCount = 0;
	bool         verified;
	for(const auto& number : numbers)
	{
		if(number.size() == 0)
		{
			++blankNumberCount;
			continue;  // skip empty numbers
		}

		// verify that this number looks like a number
		//	for integer types, allow hex and binary
		//	for all types allow base10

		verified = false;

		//__COUTV__(number);

		// check integer types
		if(typeid(unsigned int) == typeid(retValue) || typeid(int) == typeid(retValue) || typeid(unsigned long long) == typeid(retValue) ||
		   typeid(long long) == typeid(retValue) || typeid(unsigned long) == typeid(retValue) || typeid(long) == typeid(retValue) ||
		   typeid(unsigned short) == typeid(retValue) || typeid(short) == typeid(retValue) || typeid(uint8_t) == typeid(retValue))
		{
			if(number.find("0x") == 0)  // indicates hex
			{
				//__COUT__ << "0x found" << __E__;
				for(unsigned int i = 2; i < number.size(); ++i)
				{
					if(!((number[i] >= '0' && number[i] <= '9') || (number[i] >= 'A' && number[i] <= 'F') || (number[i] >= 'a' && number[i] <= 'f')))
					{
						//__COUT__ << "prob " << number[i] << __E__;
						return false;
					}
				}
				verified = true;
			}
			else if(number[0] == 'b')  // indicates binary
			{
				//__COUT__ << "b found" << __E__;

				for(unsigned int i = 1; i < number.size(); ++i)
				{
					if(!((number[i] >= '0' && number[i] <= '1')))
					{
						//__COUT__ << "prob " << number[i] << __E__;
						return false;
					}
				}
				verified = true;
			}
		}

		// if not verified above, for all types, check base10
		if(!verified)
			for(unsigned int i = 0; i < number.size(); ++i)
				if(!((number[i] >= '0' && number[i] <= '9') || number[i] == '.' || number[i] == '+' || number[i] == '-'))
					return false;

		// at this point, this number is confirmed to be a number of some sort
		// so convert to temporary number
		if(typeid(double) == typeid(retValue))
			tmpValue = strtod(number.c_str(), 0);
		else if(typeid(float) == typeid(retValue))
			tmpValue = strtof(number.c_str(), 0);
		else if(typeid(unsigned int) == typeid(retValue) || typeid(int) == typeid(retValue) || typeid(unsigned long long) == typeid(retValue) ||
		        typeid(long long) == typeid(retValue) || typeid(unsigned long) == typeid(retValue) || typeid(long) == typeid(retValue) ||
		        typeid(unsigned short) == typeid(retValue) || typeid(short) == typeid(retValue) || typeid(uint8_t) == typeid(retValue))
		{
			if(number.size() > 2 && number[1] == 'x')  // assume hex value
				tmpValue = (T)strtol(number.c_str(), 0, 16);
			else if(number.size() > 1 && number[0] == 'b')             // assume binary value
				tmpValue = (T)strtol(number.substr(1).c_str(), 0, 2);  // skip first 'b' character
			else
				tmpValue = (T)strtol(number.c_str(), 0, 10);
		}
		else //just try!
		{
			if(number.size() > 2 && number[1] == 'x')  // assume hex value
				tmpValue = (T)strtol(number.c_str(), 0, 16);
			else if(number.size() > 1 && number[0] == 'b')             // assume binary value
				tmpValue = (T)strtol(number.substr(1).c_str(), 0, 2);  // skip first 'b' character
			else
				tmpValue = (T)strtol(number.c_str(), 0, 10);
			// __SS__ << "Invalid type '" << StringMacros::demangleTypeName(typeid(retValue).name()) << "' requested for a numeric string. Data was '" << number
			//        << "'" << __E__;
			// __SS_THROW__;
		}

		// apply operation
		if(i == 0)  // first value, no operation, just take value
		{
			retValue = tmpValue;

			if(ops.size() == numbers.size() - blankNumberCount)  // then there is a leading operation, so apply
			{
				if(ops[opsi] == '-')  // only meaningful op is negative sign
					retValue *= -1;
				opsi++;  // jump to first internal op
			}
		}
		else  // there is some sort of op
		{
			if(0 && i == 1)  // display what we are dealing with
			{
				__COUTV__(StringMacros::vectorToString(numbers));
				__COUTV__(StringMacros::vectorToString(ops));
			}
			// __COUTV__(opsi);
			// __COUTV__(ops[opsi]);
			// __COUTV__(tmpValue);
			// __COUT__ << "Intermediate value = " << retValue << __E__;

			switch(ops[opsi])
			{
			case '+':
				retValue += tmpValue;
				break;
			case '-':
				retValue -= tmpValue;
				break;
			case '*':
				retValue *= tmpValue;
				break;
			case '/':
				retValue /= tmpValue;
				break;
			default:
				__SS__ << "Unrecognized operation '" << ops[opsi] << "' found!" << __E__ << "Numbers: " << StringMacros::vectorToString(numbers) << __E__
				       << "Operations: " << StringMacros::vectorToString(ops) << __E__;
				__SS_THROW__;
			}
			//__COUT__ << "Op " << ops[opsi] << " intermediate value = " << retValue <<
			//__E__;
			++opsi;
		}

		++i;  // increment index for next number/op

	}  // end number loop

	return true;  // number was valid and is passed by reference in retValue
}  // end static getNumber<T>()

//==============================================================================
// validateValueForDefaultStringDataType
//	static template function
//	special validation ignoring any table info - just assuming type string
template<class T>
T StringMacros::validateValueForDefaultStringDataType(const std::string& value, bool doConvertEnvironmentVariables)
{
	T retValue;
	try
	{
		//__COUTV__(value);
		std::string data = doConvertEnvironmentVariables ? convertEnvironmentVariables(value) : value;

		// Note: allow string column types to convert to number (since user's would likely
		// expect this to work)
		if(StringMacros::getNumber(data, retValue))
			return retValue;
		else
		{
			__SS__ << "Invalid type '" << StringMacros::demangleTypeName(typeid(retValue).name())
			       << "' requested for a non-numeric string (must request std::string). "
			          "Data was '"
			       << data << "'" << __E__;
			__SS_THROW__;
		}
	}
	catch(const std::runtime_error& e)
	{
		__SS__ << "Failed to validate the string value for the data type  '" << StringMacros::demangleTypeName(typeid(retValue).name()) << "' requested. "
		       << __E__ << e.what() << __E__;
		ss << StringMacros::stackTrace();
		__SS_THROW__;
	}
}  // end validateValueForDefaultStringDataType<T>()

//==============================================================================
// static template function
//	Note: that empty names are not allowed (or at least are confusing)!
template<class T /*value type*/, class S /*name string or const string*/>
void StringMacros::getMapFromString(const std::string&    inputString,
                                    std::map<S, T>&       mapToReturn,
                                    const std::set<char>& pairPairDelimiter /* = {',','|','&'}*/,
                                    const std::set<char>& nameValueDelimiter /* = {'=',':'} */,
                                    const std::set<char>& whitespace /* = {' ','\t','\n','\r'}*/) try
{
	unsigned int i = 0;
	unsigned int j = 0;
	std::string  name;
	bool         needValue = false;

	// go through the full string extracting map pairs
	// add each found pair to map
	for(; j < inputString.size(); ++j)
		if(!needValue)  // finding name
		{
			if((whitespace.find(inputString[j]) != whitespace.end() ||  // ignore leading white space or delimiter
			    pairPairDelimiter.find(inputString[j]) != pairPairDelimiter.end()) &&
			   i == j)
				++i;
			else if((whitespace.find(inputString[j]) != whitespace.end() ||  // trailing white space or delimiter indicates end
			         nameValueDelimiter.find(inputString[j]) != nameValueDelimiter.end()) &&
			        i != j)  // assume end of map name
			{
				//__COUT__ << "Map name found: " <<
				//		inputString.substr(i,j-i) << __E__;

				name = inputString.substr(i, j - i);  // save name, for concluding pair

				needValue = true;  // need value now

				// setup i and j for next find
				i = j + 1;
			}
		}
		else  // finding value
		{
			if((whitespace.find(inputString[j]) != whitespace.end() ||  // ignore leading white space or delimiter
			    nameValueDelimiter.find(inputString[j]) != nameValueDelimiter.end()) &&
			   i == j)
				++i;
			else if(whitespace.find(inputString[j]) != whitespace.end() ||              // trailing white space or delimiter indicates end
			        pairPairDelimiter.find(inputString[j]) != pairPairDelimiter.end())  // &&
			                                                                            // i != j)  // assume end of value name
			{
				//__COUT__ << "Map value found: " <<
				//		inputString.substr(i,j-i) << __E__;

				auto /*pair<it,success>*/ emplaceReturn =
				    mapToReturn.emplace(std::pair<S, T>(name, validateValueForDefaultStringDataType<T>(inputString.substr(i, j - i))  // value
				                                        ));

				if(!emplaceReturn.second)
				{
					__COUT_WARN__ << "Ignoring repetitive value ('" << inputString.substr(i, j - i) << "') and keeping current value ('"
					              << emplaceReturn.first->second << "'). " << __E__;
				}

				needValue = false;  // need name now

				// setup i and j for next find
				i = j + 1;
			}
		}

	if(needValue && i != j)  // last value (for case when no concluding ' ' or delimiter)
	{
		//__COUT__ << "Map value found: " <<
		//		inputString.substr(i,j-i) << __E__;

		auto /*pair<it,success>*/ emplaceReturn =
		    mapToReturn.emplace(std::pair<S, T>(name, validateValueForDefaultStringDataType<T>(inputString.substr(i, j - i))  // value
		                                        ));

		if(!emplaceReturn.second)
		{
			__COUT_WARN__ << "Ignoring repetitive value ('" << inputString.substr(i, j - i) << "') and keeping current value ('" << emplaceReturn.first->second
			              << "'). " << __E__;
		}
	}
}  // end getMapFromString<T>()
catch(const std::runtime_error& e)
{
	__SS__ << "Error while extracting a map from the string '" << inputString << "'... is it a valid map?" << __E__ << e.what() << __E__;
	__SS_THROW__;
}  // end getMapFromString

//==============================================================================
// static template function
template<class T>
std::string StringMacros::mapToString(const std::map<std::string, T>& mapToReturn,
                                      const std::string&              primaryDelimeter /*= ", "*/,
                                      const std::string&              secondaryDelimeter /*= ": "*/)
{
	std::stringstream ss;
	bool              first = true;
	for(auto& mapPair : mapToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << mapPair.first << secondaryDelimeter << mapPair.second;
	}
	return ss.str();
}  // end mapToString<T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::mapToString(const std::map<std::pair<std::string, std::string>, T>& mapToReturn,
                                      const std::string&                                      primaryDelimeter /*= ", "*/,
                                      const std::string&                                      secondaryDelimeter /*= ": "*/)
{
	// this is a pretty specific map format (comes from the merge function in TableBase)

	std::stringstream ss;
	bool              first = true;
	for(auto& mapPair : mapToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << mapPair.first.first << "/" << mapPair.first.second << secondaryDelimeter << mapPair.second;
	}
	return ss.str();
}  // end mapToString<T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::mapToString(const std::map<std::pair<std::string, std::pair<std::string, std::string>>, T>& mapToReturn,
                                      const std::string&                                                              primaryDelimeter /*= ", "*/,
                                      const std::string&                                                              secondaryDelimeter /*= ": "*/)
{
	// this is a pretty specific map format (comes from the merge function in TableBase)
	std::stringstream ss;
	bool              first = true;
	for(auto& mapPair : mapToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << mapPair.first.first << "/" << mapPair.first.second.first << "," << mapPair.first.second.second << secondaryDelimeter << mapPair.second;
	}
	return ss.str();
}  // end mapToString<T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::mapToString(const std::map<std::string, std::pair<std::string, T>>& mapToReturn,
                                      const std::string&                                      primaryDelimeter /*= ", "*/,
                                      const std::string&                                      secondaryDelimeter /*= ": "*/)
{
	// this is a pretty specific map format (comes from the get aliases functions in
	// ConfigurationManager)
	std::stringstream ss;
	bool              first = true;
	for(auto& mapPair : mapToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << mapPair.first << "/" << mapPair.second.first << secondaryDelimeter << mapPair.second.second;
	}
	return ss.str();
}  // end mapToString<T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::mapToString(const std::map<std::string, std::map<std::string, T>>& mapToReturn,
                                      const std::string&                                     primaryDelimeter /*= ", "*/,
                                      const std::string&                                     secondaryDelimeter /*= ": "*/)
{
	// this is a pretty specific map format (comes from the get aliases functions in
	// ConfigurationManager)
	std::stringstream ss;
	bool              first = true;
	for(auto& mapPair : mapToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << mapPair.first;
		for(auto& secondMapPair : mapPair.second)
			ss << "/" << secondMapPair.first << secondaryDelimeter << secondMapPair.second;
	}
	return ss.str();
}  // end mapToString<T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::mapToString(const std::map<std::string, std::set<T>>& mapToReturn,
                                      const std::string&                        primaryDelimeter /*= ", "*/,
                                      const std::string&                        secondaryDelimeter /*= ": "*/)
{
	// this is a somewhat specific map format (one usage is in CodeEditor)
	std::stringstream ss;
	bool              first = true;
	for(auto& mapPair : mapToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << mapPair.first;
		ss << ":";
		ss << StringMacros::setToString(mapPair.second, secondaryDelimeter);
	}
	return ss.str();
}  // end mapToString<T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::mapToString(const std::map<std::string, std::vector<T>>& mapToReturn,
                                      const std::string&                           primaryDelimeter /*= ", "*/,
                                      const std::string&                           secondaryDelimeter /*= ": "*/)
{
	// this is a somewhat specific map format (one usage is similar to that in CodeEditor)
	std::stringstream ss;
	bool              first = true;
	for(auto& mapPair : mapToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << mapPair.first;
		ss << ":";
		ss << StringMacros::vectorToString(mapPair.second, secondaryDelimeter);
	}
	return ss.str();
}  // end mapToString<T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::setToString(const std::set<T>& setToReturn, const std::string& delimeter /*= ", "*/)
{
	std::stringstream ss;
	bool              first = true;
	for(auto& setValue : setToReturn)
	{
		if(first)
			first = false;
		else
			ss << delimeter;
		ss << setValue;
	}
	return ss.str();
}  // end setToString<T>()

//==============================================================================
// static template function
template<class S, class T>
std::string StringMacros::setToString(const std::set<std::pair<S, T>>& setToReturn,
                                      const std::string&               primaryDelimeter /*= ", "*/,
                                      const std::string&               secondaryDelimeter /*= ":"*/)
{
	// this is a somewhat specific vector format (one usage is in FE Macro arguments)
	std::stringstream ss;
	bool              first = true;
	for(auto& setPair : setToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << setPair.first << secondaryDelimeter << setPair.second;
	}
	return ss.str();
}  // end setToString<S,T>()

//==============================================================================
// static template function
template<class T>
std::string StringMacros::vectorToString(const std::vector<T>& setToReturn, const std::string& delimeter /*= ", "*/)
{
	std::stringstream ss;
	bool              first = true;
	for(auto& setValue : setToReturn)
	{
		if(first)
			first = false;
		else
			ss << delimeter;
		ss << setValue;
	}
	return ss.str();
}  // end vectorToString<T>()

//==============================================================================
// static template function
template<class S, class T>
std::string StringMacros::vectorToString(const std::vector<std::pair<S, T>>& setToReturn,
                                         const std::string&                  primaryDelimeter /*= "; "*/,
                                         const std::string&                  secondaryDelimeter /*= ":"*/)
{
	// this is a somewhat specific vector format (one usage is in FE Macro arguments)
	std::stringstream ss;
	bool              first = true;
	for(auto& setPair : setToReturn)
	{
		if(first)
			first = false;
		else
			ss << primaryDelimeter;
		ss << setPair.first << secondaryDelimeter << setPair.second;
	}
	return ss.str();
}  // end vectorToString<S,T>()
