//#include "otsdaq/Utilities/DataManager/CircularBuffer.h"
//#include "otsdaq/MessageFacility/MessageFacility.h"
#include "otsdaq/Macros/CoutMacros.h"

#include <stdlib.h>
#include <iostream>

//========================================================================================================================
template<class D, class H>
CircularBuffer<D, H>::CircularBuffer(const std::string& dataBufferId) : CircularBufferBase(dataBufferId)
{
	__GEN_COUT__ << "Constructed." << __E__;
}  // end constructor()

//========================================================================================================================
template<class D, class H>
CircularBuffer<D, H>::~CircularBuffer(void)
{
	__GEN_COUT__ << "Destructed." << __E__;
}  // end destructor()

//========================================================================================================================
template<class D, class H>
void CircularBuffer<D, H>::reset(void)
{
	for(auto& it : theBuffer_)
		it.second.reset();
}

//========================================================================================================================
template<class D, class H>
bool CircularBuffer<D, H>::isEmpty(void) const
{
	for(auto& it : theBuffer_)
		if(!it.second.isEmpty())
			return false;
	return true;
}  // end isEmpty()

//========================================================================================================================
template<class D, class H>
unsigned int CircularBuffer<D, H>::getTotalNumberOfSubBuffers(void) const
{
	unsigned int numberOfBuffers = 0;
	for(auto& it : theBuffer_)
		numberOfBuffers += it.second.bufferSize();  // add sub-buffer count
	return numberOfBuffers;
}  // end getTotalNumberOfSubBuffers()

//========================================================================================================================
template<class D, class H>
unsigned int CircularBuffer<D, H>::getProducerBufferSize(const std::string& producerID) const
{
	return theBuffer_.at(producerID).bufferSize();
}  // end getProducerBufferSize()

//========================================================================================================================
template<class D, class H>
void CircularBuffer<D, H>::registerProducer(const std::string& producerID, unsigned int bufferSize)
{
	if(theBuffer_.find(producerID) != theBuffer_.end())
	{
		__SS__ << "There is already a producer with name: " << producerID << "...Aborting" << std::endl;
		__SS_THROW__;
	}

	__COUTV__(producerID);
	__COUTV__(bufferSize);

	auto /*<it,new bool>*/ emplacePair = theBuffer_.emplace(std::make_pair(  // pair<std::string,BufferImplementation<D,H> >(
	    producerID,
	    BufferImplementation<D, H>(producerID, bufferSize)));

	__COUT__ << "Registering " << consumers_.size() << " existing consumers to new buffer implementation." << __E__;

	// register all existing consumers
	for(const auto& consumer : consumers_)
		emplacePair.first->second.registerConsumer(consumer.first, consumer.second);

	__COUT__ << "PRODUCER NAME: " << producerID << " SIZE: " << theBuffer_.size() << std::endl;
}

//========================================================================================================================
template<class D, class H>
void CircularBuffer<D, H>::registerConsumer(const std::string& consumerID, CircularBufferBase::ConsumerPriority priority)
{
	consumers_[consumerID] = priority;

	for(auto& it : theBuffer_)
		it.second.registerConsumer(consumerID, priority);
	lastReadBuffer_[consumerID] = theBuffer_.begin();
}
////========================================================================================================================
// template<class D, class H>
// void CircularBuffer<D,H>::unregisterConsumer(const std::string& consumerID)
//{
//
//	for(auto& it: theBuffer_)
//		it.second.unregisterConsumer(consumerID);
//
//	int numberErased = consumers_.erase(consumerID);
//	if(numberErased != 1)
//	{
//		__GEN_SS__ << "While unregistering, producerID '" << consumerID <<
//				"' not found! Number erased = " << numberErased << __E__;
//		__GEN_SS_THROW__;
//	}
//
//	numberErased = lastReadBuffer_.erase(consumerID);
//	if(numberErased != 1)
//	{
//		__GEN_SS__ << "While unregistering, producerID '" << consumerID <<
//				"' not found! Number erased = " << numberErased << __E__;
//		__GEN_SS_THROW__;
//	}
//}
//
////========================================================================================================================
// template<class D, class H>
// void CircularBuffer<D,H>::unregisterProducer(const std::string& producerID)
//{
//	int numberErased = theBuffer_.erase(producerID);
//	if(numberErased != 1)
//	{
//		__GEN_SS__ << "While unregistering, producerID '" << producerID <<
//				"' not found! Number erased = " << numberErased << __E__;
//		__GEN_SS_THROW__;
//	}
//} //end unregisterProducer

//========================================================================================================================
template<class D, class H>
void CircularBuffer<D, H>::resetConsumerList(void)
{
	consumers_.clear();

	for(auto& it : theBuffer_)
		it.second.resetConsumerList();
}

//========================================================================================================================
template<class D, class H>
void CircularBuffer<D, H>::setNextProducerBuffer(const std::string& consumerID)
{
	if(++lastReadBuffer_[consumerID] == theBuffer_.end())
		lastReadBuffer_[consumerID] = theBuffer_.begin();
}
