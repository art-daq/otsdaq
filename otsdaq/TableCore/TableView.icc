
//==============================================================================
template<class T>
unsigned int TableView::findRow(unsigned int col, const T& value, unsigned int offsetRow /*=0*/, bool doNotThrow /*= false*/) const
{
	std::stringstream ss;
	ss << value;
	return findRow(col, ss.str(), offsetRow, doNotThrow);
}  // end findRow<T>()

//==============================================================================
template<class T>
unsigned int TableView::findRowInGroup(
    unsigned int col, const T& value, const std::string& groupId, const std::string& childLinkIndex, unsigned int offsetRow /*=0*/) const
{
	std::stringstream ss(value);
	ss << value;
	return findRowInGroup(col, ss.str(), groupId, childLinkIndex, offsetRow);
}  // end findRowInGroup<T>()

//==============================================================================
// Philosophy: force type validation by passing value to fill by reference..
//	do not allow string to be returned.. (at least not easily)
// Since there is no environmental variable that can just be a number they will all be
// converted no matter what.
template<class T>
void TableView::getValue(T& value, unsigned int row, unsigned int col, bool doConvertEnvironmentVariables /*=true*/) const
{
	if(!(col < columnsInfo_.size() && row < getNumberOfRows()))
	{
		__SS__ << "Invalid row col requested" << __E__;
		__SS_THROW__;
	}

	value = validateValueForColumn<T>(theDataView_[row][col], col, doConvertEnvironmentVariables);
}  // end getValue<T>()

//==============================================================================
// validateValueForColumn
//	validates value against data rules for specified column.
//	throws exception if invalid.
//
//	on success returns what the value would be for get value
template<class T>
T TableView::validateValueForColumn(const std::string& value, unsigned int col, bool doConvertEnvironmentVariables /*=true*/) const
{
	if(col >= columnsInfo_.size())
	{
		__SS__ << "Invalid col " << col << " requested." << std::endl;
		__SS_THROW__;
	}

	T retValue;

	try
	{
		if(columnsInfo_[col].getDataType() == TableViewColumnInfo::DATATYPE_NUMBER)  // handle numbers
		{
			if(columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_FIXED_CHOICE_DATA && 
				//value == columnsInfo_[col].getDefaultValue())
				value == columnsInfo_[col].getDefaultDefaultValue(columnsInfo_[col].getType(),columnsInfo_[col].getDataType()))
			{
				// if type number, fixed choice and 0(default), then return first choice

				std::vector<std::string> choices = columnsInfo_[col].getDataChoices();

				// consider arbitrary bool
				bool   skipOne = (choices.size() && choices[0].find("arbitraryBool=") == 0);
				size_t index   = (skipOne ? 1 : 0);
				if(choices.size() > index)
				{
					std::string data = doConvertEnvironmentVariables ? StringMacros::convertEnvironmentVariables(choices[index])
					                                                 : choices[index];  // handled value from fixed choices

					if(StringMacros::getNumber(data, retValue))
						return retValue;
					else
					{
						__SS__ << (data + " is not a number!") << __E__;
						__SS_THROW__;
					}
				}
			}  // end handling default to fixed choice conversion

			std::string data = doConvertEnvironmentVariables ? StringMacros::convertEnvironmentVariables(value) : value;

			if(StringMacros::getNumber(data, retValue))
				return retValue;
			else
			{
				__SS__ << (data + " is not a number!") << __E__;
				__SS_THROW__;
			}
		}
		else if(columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_FIXED_CHOICE_DATA &&
		        columnsInfo_[col].getDataType() == TableViewColumnInfo::DATATYPE_STRING &&
		        (typeid(int) == typeid(retValue) || typeid(unsigned int) == typeid(retValue)))
		{
			// this case is for if fixed choice type but int is requested
			//	then return index in fixed choice list
			//	(always consider DEFAULT as index 0, so first non-default is index 1 and so on)
			// throw error if no match

			if(value == columnsInfo_[col].getDefaultValue()) // allow custom default value, not necessarily TableViewColumnInfo::DATATYPE_STRING_DEFAULT)
				retValue = 0;
			else
			{
				std::vector<std::string> choices = columnsInfo_[col].getDataChoices();

				// for(const auto& choice: choices)
				// 	__COUT__ << "choice " << choice << __E__;

				// consider arbitrary bool
				bool   skipOne = (choices.size() && choices[0].find("arbitraryBool=") == 0);
				size_t index   = 0;

				// return index of choices that are not the DEFAULT value starting at index 1
				for(index = 0 + (skipOne ? 1 : 0); index < choices.size(); ++index)
				{
					// __COUT__ << value << " vs " << choices[index] << " " << (skipOne?1:0) << __E__;
					if(value == choices[index])
					{
						// __COUT__ << value << " == " << choices[index] << __E__;
						return static_cast<T>(1 + index - (skipOne ? 1 : 0));  // value has been set to
						                                                   // selected choice index, so
						                                                   // return
					}
				}

				__SS__ << "\tInvalid value for column data type: " << columnsInfo_[col].getDataType() << " in configuration " << tableName_
				       << " at column=" << columnsInfo_[col].getName() << " for getValue with type '" << StringMacros::demangleTypeName(typeid(retValue).name())
				       << ".'"
				       << "Attempting to get index of '" << value << " in fixed choice array, but was not found in array. "
				       << "Here are the valid choices:\n";
				ss << "\t" << TableViewColumnInfo::DATATYPE_STRING_DEFAULT << "\n";
				for(const auto& choice : choices)
					ss << "\t" << choice << "\n";
				__COUT__ << "\n" << ss.str();
				__SS_THROW__;
			}

			return retValue;
		}
		else if(columnsInfo_[col].getDataType() == TableViewColumnInfo::DATATYPE_STRING && typeid(bool) == typeid(retValue))  // handle bool
		{
			if(columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_ON_OFF)
				retValue = (value == TableViewColumnInfo::TYPE_VALUE_ON) ? true : false;
			else if(columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_TRUE_FALSE)
				retValue = (value == TableViewColumnInfo::TYPE_VALUE_TRUE) ? true : false;
			else if(columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_YES_NO)
				retValue = (value == TableViewColumnInfo::TYPE_VALUE_YES) ? true : false;
			else if(value.length() && value[0] == '1')  // for converting pure string
			                                            // types
				retValue = true;
			else if(value.length() && value[0] == '0')  // for converting pure string
			                                            // types
				retValue = false;
			else
			{
				__SS__ << "Invalid boolean value encountered: " << value << __E__;
				__SS_THROW__;
			}

			return retValue;
		}
		else if(columnsInfo_[col].getDataType() == TableViewColumnInfo::DATATYPE_STRING && typeid(std::string) != typeid(retValue))
		{
			return StringMacros::validateValueForDefaultStringDataType<T>(value, doConvertEnvironmentVariables);
		}

		// if here, then there was a problem
		__SS__ << "Impossible Error." << __E__;
		__SS_THROW__;
	}
	catch(const std::runtime_error& e)
	{
		__SS__ << "\tUnrecognized column data type: " << columnsInfo_[col].getDataType() << " and column type: " << columnsInfo_[col].getType()
		       << ", in configuration " << tableName_ << " at column=" << columnsInfo_[col].getName() << " for getValue with type '"
		       << StringMacros::demangleTypeName(typeid(retValue).name()) << "'" << std::endl;

		if(columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_FIXED_CHOICE_DATA)
			ss << "For column type " << TableViewColumnInfo::TYPE_FIXED_CHOICE_DATA << " the only valid numeric types are 'int' and 'unsigned int.'" << __E__;
		else if(columnsInfo_[col].getDataType() != TableViewColumnInfo::DATATYPE_STRING &&
		        (columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_ON_OFF || columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_TRUE_FALSE ||
		         columnsInfo_[col].getType() == TableViewColumnInfo::TYPE_YES_NO))
			ss << "For boolean column types (e.g. On/Off, True/False, Yes/No), you must "
			      "choose "
			   << "datatype '" << TableViewColumnInfo::DATATYPE_STRING << ".'" << __E__;

		ss << e.what() << __E__;
		__SS_THROW__;
	}
}  // end validateValueForColumn<T>()

//==============================================================================
template<class T>
void TableView::setVersion(const T& version)
{
	version_ = TableVersion(version);
}  // end setVersion<>()

//==============================================================================
// These two methods check for basic type consistency
template<class T>
void TableView::setValue(const T& value, unsigned int row, unsigned int col)
{
	if(!(col < columnsInfo_.size() && row < getNumberOfRows()))
	{
		__SS__ << "Invalid row (" << row << ") col (" << col << ") requested!" << std::endl;
		__SS_THROW__;
	}

	if(columnsInfo_[col].getDataType() == TableViewColumnInfo::DATATYPE_NUMBER)
	{
		std::stringstream ss;
		ss << value;
		theDataView_[row][col] = ss.str();
	}
	else if(columnsInfo_[col].getDataType() == TableViewColumnInfo::DATATYPE_TIME && typeid(time_t) == typeid(value))
	{
		// save DATATYPE_TIME as unix timestamp, but get as nice string
		std::stringstream ss;
		ss << value;
		theDataView_[row][col] = ss.str();
	}
	else
	{
		__SS__ << "\tUnrecognized view data type: " << columnsInfo_[col].getDataType() << " in configuration " << tableName_
		       << " at column=" << columnsInfo_[col].getName() << " for setValue with type '" << StringMacros::demangleTypeName(typeid(value).name()) << "'"
		       << std::endl;
		__SS_THROW__;
	}
}  // end setValue<T>()
