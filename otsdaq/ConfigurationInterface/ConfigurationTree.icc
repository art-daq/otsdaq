
//==============================================================================
// getValue (not std::string value)
//	throw exception unless it value node
// NOTE: can not overload functions based on return type, so T& passed as value
template<class T>
void ConfigurationTree::getValue(T& value) const
{
	if(row_ != TableView::INVALID && col_ != TableView::INVALID)  // this node is a value node
	{
		// attempt to interpret the value as a tree node path itself
		try
		{
			ConfigurationTree valueAsTreeNode = getValueAsTreeNode();
			// valueAsTreeNode.getValue<T>(value);
			__COUT__ << "Success following path to tree node!" << __E__;
			// value has been interpreted as a tree node value
			// now verify result under the rules of this column
			//				if(typeid(std::string) == typeid(value) ||
			//						typeid(std::basic_string<char>) == typeid(value))
			//					value =	tableView_->validateValueForColumn(
			//						valueAsTreeNode.getValueAsString(),col_);
			//				else
			//	value = (T)tableView_->validateValueForColumn<T>(
			//		valueAsTreeNode.getValueAsString(),col_);
			value = handleValidateValueForColumn(tableView_, valueAsTreeNode.getValueAsString(), col_, identity<T>());

			__COUT__ << "Successful value!" << __E__;
			return;
		}
		catch(...)  // tree node path interpretation failed
		{
			//__COUT__ << "Invalid path, just returning normal value." << __E__;
		}

		// else normal return
		tableView_->getValue(value, row_, col_);
	}
	else if(row_ == TableView::INVALID && col_ == TableView::INVALID)  // this node is config node maybe with groupId
	{
		__SS__ << "Requesting getValue on config node level. Must be a value node. " << __E__;
		ss << nodeDump() << __E__;
		__SS_THROW__;
	}
	else if(row_ == TableView::INVALID)
	{
		__SS__ << "Malformed ConfigurationTree. " << __E__;

		ss << nodeDump() << __E__;
		__SS_THROW__;
	}
	else if(col_ == TableView::INVALID)  // this node is uid node
	{
		__SS__ << "Requesting getValue on uid node level. Must be a value node. " << __E__;

		ss << nodeDump() << __E__;
		__SS_THROW__;
	}
	else
	{
		__SS__ << "Impossible! " << __E__;

		ss << nodeDump() << __E__;
		__SS_THROW__;
	}
}  // end getValue<T>()

//==============================================================================
// getValue (not std::string value)
//	throw exception unless it value node
// NOTE: can not overload functions based on return type, so calls function with T& passed
// as value
template<class T>
T ConfigurationTree::getValue(void) const
{
	T value;
	ConfigurationTree::getValue<T>(value);
	return value;
}  // end T getValue()

//==============================================================================
// getValueWithDefault (not std::string value)
//	throw exception unless it value node
// NOTE: can not overload functions based on return type, so calls function with T& passed
// as value
template<class T>
T ConfigurationTree::getValueWithDefault(const T& defaultValue) const
{
	if(isDefaultValue())
		return defaultValue;
	else
		return ConfigurationTree::getValue<T>();
}  // end T getValueWithDefault()

//==============================================================================
template<typename T>
T ConfigurationTree::handleValidateValueForColumn(const TableView* configView, std::string value, unsigned int col, ots::identity<T>) const
{
	if(!configView)
	{
		__SS__ << "Null configView" << __E__;

		ss << nodeDump() << __E__;
		__SS_THROW__;
	}
	__COUT__ << "handleValidateValueForColumn<T>" << __E__;
	return configView->validateValueForColumn<T>(value, col);
}  // end T handleValidateValueForColumn()
